# -*- encoding:utf-8 Mode: POLY-ORG;  -*- ---
#+Startup: noindent
#+PROPERTY: literate-lang lisp
#+PROPERTY: literate-load yes

[[http://quickdocs.org/literate-lisp/][file:http://quickdocs.org/badge/literate-lisp.svg]]
[[https://github.com/jingtaozf/literate-lisp/actions][file:https://github.com/jingtaozf/literate-lisp/workflows/Continous%20Integration/badge.svg]]

* Table of Contents                                            :TOC:noexport:
- [[#introduction][Introduction]]
- [[#tutorial][Tutorial]]
  - [[#the-restriction-to-the-org-file][The restriction to the org file]]
  - [[#install-polymode-in-emacs][install polymode in Emacs]]
  - [[#how-to-insert-code-block-quickly][how to insert code block quickly]]
  - [[#a-new-code-block-header-argument-load][a new code block header argument ~load~]]
  - [[#how-to-debug-org-file-in-lispworks-ide][How to debug org file in LispWorks IDE]]
  - [[#how-to-write-user-initialization-file-with-literate-programming-style][How to write user initialization file with literate programming style]]
  - [[#packages-written-by-literate-lisp][packages written by literate-lisp]]
  - [[#a-demo-literate-application][A demo literate application]]

* Introduction
[[https://github.com/jingtaozf/literate-lisp][literate-lisp]] provides an easy way to use [[http://www.literateprogramming.com/][literal programming]] in Common Lisp language.
It extends the Common Lisp [[https://www.cs.cmu.edu/Groups/AI/html/cltl/clm/node187.html][reader syntax]]
so a Common Lisp vendor can read org files as Common Lisp source files.

By using this package([[https://github.com/jingtaozf/literate-lisp][literate-lisp]]), Emacs [[https://orgmode.org/][org mode]] and Emacs Lisp library [[https://polymode.github.io/][polymode]],
literate programming can be very easy in one org file containing both documentation and source codes,
and this org file can interact well with [[https://common-lisp.net/project/slime/][SLIME]].

The implementation detail of [[https://github.com/jingtaozf/literate-lisp][literate-lisp]] is in file [[./literate-lisp.org]] ([[./literate-lisp.pdf][pdf version]]).

This library contains the following files:
- [[./literate-lisp.org]] \\
  The implementation and documentation of literate lisp reader.
- [[./literate-lisp.lisp]] \\
  The tangled codes of literate lisp reader, generated from [[./literate-lisp.org]]
- [[./literate-lisp.pdf]] \\
  The weaved documentation, generated from [[./literate-lisp.org]] by org mode's [[https://orgmode.org/manual/Triggering-publication.html#Triggering-publication][publish feature]].
- [[./readme.org]] \\
  This file contains introduction and demo codes for how to do literate lisp in an org file.
- [[./puzzle.org]] \\
  This file contains a puzzle solver to show how to do literate lisp in an org file.
- [[./.github/workflows/continuous-integration.yml][continuous-integration.yml]] \\
  The config file used by Web service [[https://github.com/jingtaozf/literate-lisp/actions][github actions]] to test this library.
- [[./literate-lisp.asd]] \\
  The ASDF definition for literate-lisp project.
- [[./literate-demo.asd]] \\
  The ASDF definition for literate demo project.

* Tutorial
** The restriction to the org file
The org file should start with a comment character and a space character("# "), to drive lisp reader into ORG syntax.
Actually it can be a convenient way for us to specify some local variables,
for example I often put them in the first line of an org file:
#+BEGIN_SRC org
# -*- encoding:utf-8 Mode: POLY-ORG;  -*- ---
#+END_SRC
Which make Emacs open file with utf-8 encoding and [[https://github.com/polymode/poly-org][poly-org-mode]].
** install polymode in Emacs
It's better to edit the org file with [[https://polymode.github.io/][polymode]], which will make code block use its native file mode.
The following Emacs Lisp scripts in .emacs will install it.
#+BEGIN_SRC elisp
(use-package poly-org
    :ensure t)
#+END_SRC
** how to insert code block quickly
Please have a look of the section [[https://github.com/jingtaozf/literate-elisp/blob/master/literate-elisp.org#how-to-insert-code-block-in-org-file][How to insert code block in org file]] in library [[https://github.com/jingtaozf/literate-elisp][literate-elisp]].
** a new code block header argument ~load~
Please have a look of the section [[./literate-lisp.org#new-defined-header-argument-load][new defined header argument load]] in [[./literate-lisp.org]].
** How to debug org file in LispWorks IDE
You have to add the following codes in your ~.lispworks~ to enable the debug facility in Lispworks Editor.
#+BEGIN_SRC lisp :load no
(defun check-org-mode (buffer truename)
  (when (and truename (equal (pathname-type truename) "org"))
    (setf (editor:buffer-major-mode buffer) "Lisp")))
(editor:add-global-hook editor::read-file-hook 'check-org-mode)
#+END_SRC
Thanks for Martin Simmons in [[http://www.lispworks.com/][LispWorks]] to support the above configuration codes.
** How to write user initialization file with literate programming style
You can put all initialization codes in an org source file, all you need is to load ~literate-lisp~ firstly.
For example, you can put the following codes in file [[http://www.sbcl.org/manual/#Initialization-Files][~$HOME/.sbclrc~]] for SBCL.
#+BEGIN_SRC lisp :load no
(require :asdf)
(load "~/projects/common-lisp/literate-lisp/literate-lisp.asd")
(asdf:oos 'asdf:load-op :literate-lisp)
(literate-lisp:with-literate-syntax
  (load "~/projects/common-lisp/config/init-lisp.org"))
#+END_SRC
I find it useful for various Lisp vendors so all initialization codes for them can be in just one file.

** packages written by literate-lisp
- [[https://github.com/jingtaozf/s-graphviz][s-graphviz]] an S-expression presentation of GraphViz DOT Language
** A demo literate application
We use the original ASD definition file, and extend the ASDF syntax(The documentation of extended ASDF syntax can be found in [[https://github.com/jingtaozf/literate-lisp/blob/master/literate-lsp.org#make-asdf-handle-org-file-correctly][literate-lisp.org]]).

In a short word, we should load ~literate-lisp~ by ASDF keyword ~:defsystem-depends-on~ and
declare the org source file with new ASDF keyword ~:org~.

Now let's define the ASDF system file [[./literate-demo.asd]] for this demo package
#+BEGIN_SRC elisp :load no
(asdf:defsystem literate-demo
  :author "Xu Jingtao <jingtaozf@gmail.com>"
  :version "0.1"
  :licence "MIT"
  :serial t
  :description "an demo project of literate-lisp"
  :defsystem-depends-on ("literate-lisp")
  :depends-on (:iterate #+dev :clgplot)
  :components ((:module :demo :pathname "./"
                        :components ((:org "puzzle"))))
  :properties ((version "0.1")))
#+END_SRC
Which will load this [[./puzzle.org]] directly as a lisp source file.

The whole content of ASDF definition file is in [[./literate-demo.asd]].
